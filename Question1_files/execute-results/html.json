{
  "hash": "cc2a312dede56b8d048ffd81c8cbbd13",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: viridisLite\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 1: Load datasets\nprod_data <- read.csv(\"data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_All_Data.csv\")\narea_codes <- read.csv(\"data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_AreaCodes.csv\")\nitem_codes <- read.csv(\"data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_ItemCodes.csv\")\nelements <- read.csv(\"data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_Elements.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 2: Extract and filter data for the top 10 staple crops\n# Define the top 10 staple crops based on Item names\ntop_crops <- c(\"Wheat\", \"Rice\", \"Maize (corn)\", \"Potatoes\", \"Barley\", \n               \"Cassava\", \"Sweet potatoes\", \"Sorghum\", \"Oats\", \"Beans\")\n\n# Filter the data for these crops and \"Production\" element (not \"Area harvested\")\nprod_data_filtered <- prod_data %>%\n  filter(Item %in% top_crops) %>%\n  filter(Element == \"Production\") %>%\n  select(Area, Item, Element, Unit, starts_with('Y'))  # Select relevant columns\n\n\n# Step 3: Preprocess the data\n# Remove columns that have characters like 'F' or 'N' in their names (e.g. Y1961F, Y1961N)\nprod_data_filtered <- prod_data_filtered %>%\n  select(-matches(\"F$|N$\"))  # Remove columns ending with \"F\" or \"N\"\n\n# Pivot the data so that each year's production is a separate column\nprod_data_long <- prod_data_filtered %>%\n  pivot_longer(cols = starts_with(\"Y\"), \n               names_to = \"Year\", \n               values_to = \"Production\") %>%\n  filter(!is.na(Production))  # Remove rows with missing production data\n\n# Convert Year to numeric and Production to numeric\nprod_data_long <- prod_data_long %>%\n  mutate(Year = as.numeric(gsub(\"Y\", \"\", Year)),  # Extract numeric year from column names\n         Production = as.numeric(Production))  # Ensure production is numeric\n\n\n# Step 5: (Optional) Export the processed data\n# Export the cleaned data to a CSV file\nwrite.csv(prod_data_long, \"data/Processed_Staple_Crops_Production.csv\", row.names = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize global production trends over time\nglobal_production <- prod_data_long %>%\n  group_by(Year, Item) %>%\n  summarize(Global_Production = sum(Production, na.rm = TRUE), .groups = \"drop\")\n\n# Create a line plot to visualize the global production trends over time\nggplot(global_production, aes(x = Year, y = Global_Production)) +\n  geom_line(aes(color = Item), linewidth = 1.2) +  # Line plot with thicker lines\n  theme_minimal() +\n  labs(\n    x = \"Year\", \n    y = \"Global Production (Metric Tons)\",  \n    color = \"Crop\",\n    title = \"Global Production Trends of Top 10 Staple Crops (1961 - 2022)\",\n    caption = \"Source: FAO\"\n  ) +\n  scale_color_manual(\n    values = c(\"Wheat\" = \"#FF5733\", \"Rice\" = \"#33C4FF\", \"Maize (corn)\" = \"#FFB533\", \n               \"Potatoes\" = \"#33FF57\", \"Barley\" = \"#5A33FF\", \"Cassava\" = \"#FF33A1\", \n               \"Sweet potatoes\" = \"#FF8533\", \"Sorghum\" = \"#33FFAA\", \"Oats\" = \"#FF33CC\", \n               \"Beans\" = \"#7A33FF\"),\n    labels = c(\"Wheat\", \"Rice\", \"Maize (corn)\", \"Potatoes\", \"Barley\", \n               \"Cassava\", \"Sweet potatoes\", \"Sorghum\", \"Oats\", \"Beans\")\n  ) +\n  coord_cartesian(clip = \"off\") +\n  theme(\n    legend.position = c(0.36, 0.80),  # Slightly move the legend right and down\n    legend.direction = \"horizontal\",  # Display legend horizontally\n    legend.box = \"horizontal\",  # Align the legend horizontally\n    axis.title.x = element_text(hjust = 0.5, size = 18),  # Increase X axis title font size\n    axis.title.y = element_text(hjust = 0.5, size = 18),  # Increase Y axis title font size\n    plot.title = element_text(size = 20, face = \"bold\", hjust = 0.5),  # Increase title font size\n    plot.caption = element_text(size = 14, hjust = 1, color = \"grey30\"),  # Caption with slightly larger font\n    legend.title = element_text(size = 18),  # Increase legend title font size\n    legend.text = element_text(size = 16),  # Increase legend text font size\n    axis.text.x = element_text(size = 14, face = \"bold\"),  # Increase and bold X axis tick labels\n    axis.text.y = element_text(size = 14, face = \"bold\")   # Increase and bold Y axis tick labels\n  ) +\n  scale_y_continuous(\n    labels = scales::comma_format(scale = 1e-6, prefix = \"\", suffix = \"M\"),  # Format y-axis in millions with commas\n    breaks = seq(0, max(global_production$Global_Production, na.rm = TRUE), by = 200000000)  # Reduced step size for y-axis ticks\n  ) +\n  scale_x_continuous(\n    breaks = seq(min(global_production$Year, na.rm = TRUE), max(global_production$Year, na.rm = TRUE), by = 5)  # Increase x-axis ticks\n  ) +\n  # Set figure size for output\n  theme(\n    plot.margin = margin(2, 2, 2, 2)  # Increase plot margin if needed\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nâ„¹ Please use the `legend.position.inside` argument of `theme()` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Question1_files/figure-html/unnamed-chunk-3-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(rnaturalearth)\nlibrary(viridis)\n\n# Step 1: Load the map data (world map)\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Step 2: Aggregate production data for the 10 staple crops\n# Define the top 10 crops\ntop_crops <- c(\"Wheat\", \"Rice\", \"Maize (corn)\", \"Potatoes\", \"Barley\", \n               \"Cassava\", \"Sweet potatoes\", \"Sorghum\", \"Oats\", \"Beans\")\n\n# Aggregate total production by country across all years for the top crops\nagg_prod_data <- prod_data_long %>%\n  filter(Item %in% top_crops) %>%\n  group_by(Area) %>%\n  summarize(Total_Production = sum(Production, na.rm = TRUE), .groups = \"drop\")\n\n# Step 3: Join the aggregated production data with the world map data\nregional_map_data <- world %>%\n  left_join(agg_prod_data, by = c(\"name\" = \"Area\"))  # Join by country names\n\n# Step 4: Create the choropleth map\nggplot(data = regional_map_data) +\n  geom_sf(aes(fill = Total_Production), color = \"black\", size = 0.1) +  # Fill countries with production data\n  scale_fill_gradient(\n    low = \"red\", \n    high = \"darkblue\", \n    name = \"Total Production\\n(Metric Tons)\",\n    labels = scales::comma_format(scale = 1e-6, suffix = \"M\")  # Format in millions\n  ) +\n  labs(\n    title = \"Production of Top 10 Staple Crops\",\n    caption = \"Source: FAO\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 20, face = \"bold\", hjust = 0.5),  # Title styling\n    plot.caption = element_text(size = 14, hjust = 1, color = \"grey30\"),  # Caption styling\n    legend.position = \"bottom\",  # Legend at the bottom\n    legend.title = element_text(size = 16),  # Legend title font size\n    legend.text = element_text(size = 14),  # Legend text font size\n    axis.text = element_blank(),  # Remove axis ticks for cleaner map\n    axis.title = element_blank()  # Remove axis titles\n  )\n```\n\n::: {.cell-output-display}\n![](Question1_files/figure-html/unnamed-chunk-4-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Step 1: Create a classification of countries (Developed vs. Developing)\n# Define lists of developed and developing countries (replace with actual classification)\ndeveloped_countries <- c(\"United States\", \"Canada\", \"Germany\", \"United Kingdom\", \"France\", \"Australia\", \"Japan\")\ndeveloping_countries <- c(\"India\", \"China\", \"Brazil\", \"Nigeria\", \"Indonesia\", \"Mexico\", \"South Africa\")\n\n# Step 2: Add a classification column to the production data\n# Ensure that prod_data_long contains the correct column names like 'Area' for country names, 'Year' for the year, and 'Production' for the data values\n\nprod_data_long <- prod_data_long %>%\n  mutate(\n    Country_Category = case_when(\n      Area %in% developed_countries ~ \"Developed\",\n      Area %in% developing_countries ~ \"Developing\",\n      TRUE ~ \"Other\"  # Classify remaining countries as \"Other\"\n    )\n  )\n\n# Step 3: Filter for Developed and Developing countries only\nprod_data_classified <- prod_data_long %>%\n  filter(Country_Category %in% c(\"Developed\", \"Developing\"))\n\n# Step 4: Aggregate production by year and country category\nagg_trends <- prod_data_classified %>%\n  group_by(Year, Country_Category) %>%\n  summarize(Total_Production = sum(Production, na.rm = TRUE), .groups = \"drop\")\n\n# Step 5: Create the line plot\nggplot(agg_trends, aes(x = Year, y = Total_Production, color = Country_Category, group = Country_Category)) +\n  geom_line(linewidth = 1.2) +  # Line plot\n  theme_minimal() +\n  labs(\n    title = \"Production Trends of Staple Crops in Developed vs. Developing Countries (1961 - 2022)\",\n    x = \"Year\",\n    y = \"Total Production (Metric Tons)\",\n    color = \"Country Category\",\n    caption = \"Source: FAO\"\n  ) +\n  scale_y_continuous(\n    labels = scales::comma_format(scale = 1e-6, suffix = \"M\")  # Format y-axis in millions\n  ) +\n  scale_x_continuous(\n    breaks = seq(min(prod_data_classified$Year, na.rm = TRUE), max(prod_data_classified$Year, na.rm = TRUE), by = 5)\n  ) +\n  scale_color_manual(\n    values = c(\"Developed\" = \"blue\", \"Developing\" = \"green\")\n  ) +\n  theme(\n    plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5),\n    axis.title = element_text(size = 14),\n    axis.text = element_text(size = 12),\n    legend.title = element_text(size = 14),\n    legend.text = element_text(size = 12)\n  )\n```\n\n::: {.cell-output-display}\n![](Question1_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Question1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
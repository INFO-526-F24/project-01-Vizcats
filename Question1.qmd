```{r}
# Load required libraries
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(sf)
library(rnaturalearth)
library(viridis)

# Step 1: Load datasets
prod_data <- read.csv("data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_All_Data.csv")
area_codes <- read.csv("data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_AreaCodes.csv")
item_codes <- read.csv("data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_ItemCodes.csv")
elements <- read.csv("data/Production_Crops_Livestock_E_All_Data/Production_Crops_Livestock_E_Elements.csv")

```

```{r}
# Define the top 10 staple crops based on Item names
top_crops <- c("Wheat", "Rice", "Maize (corn)", "Potatoes", "Barley", 
               "Cassava", "Sweet potatoes", "Sorghum", "Oats", "Beans")

# Filter the data for these crops and "Production" element (not "Area harvested")
prod_data_filtered <- prod_data %>%
  filter(Item %in% top_crops) %>%
  filter(Element == "Production") %>%
  select(Area, Item, Element, Unit, starts_with('Y'))  # Select relevant columns

# Remove columns that have characters like 'F' or 'N' in their names (e.g. Y1961F, Y1961N)
prod_data_filtered <- prod_data_filtered %>%
  select(-matches("F$|N$"))  # Remove columns ending with "F" or "N"

# Pivot the data so that each year's production is a separate column
prod_data_long <- prod_data_filtered %>%
  pivot_longer(cols = starts_with("Y"), 
               names_to = "Year", 
               values_to = "Production") %>%
  filter(!is.na(Production))  # Remove rows with missing production data

# Convert Year to numeric and Production to numeric
prod_data_long <- prod_data_long %>%
  mutate(Year = as.numeric(gsub("Y", "", Year)),  # Extract numeric year from column names
         Production = as.numeric(Production))  # Ensure production is numeric

# Export the cleaned data to a CSV file
write.csv(prod_data_long, "data/Processed_Staple_Crops_Production.csv", row.names = FALSE)

```

```{r, fig.height=9,fig.width=12}
library(ggplot2)
library(dplyr)
library(gganimate)

# Step 2: Extract and filter data for the top 10 staple crops
top_crops <- c("Wheat", "Rice", "Maize (corn)", "Potatoes", "Barley", 
               "Cassava", "Sweet potatoes", "Sorghum", "Oats", "Beans")

# Filter and preprocess the data
prod_data_filtered <- prod_data %>%
  filter(Item %in% top_crops) %>%
  filter(Element == "Production") %>%
  select(Area, Item, Element, Unit, starts_with('Y')) %>%
  select(-matches("F$|N$")) %>%
  pivot_longer(cols = starts_with("Y"), 
               names_to = "Year", 
               values_to = "Production") %>%
  filter(!is.na(Production)) %>%
  mutate(
    Year = as.numeric(gsub("Y", "", Year)),  # Extract numeric year from column names
    Production = as.numeric(Production)     # Ensure production is numeric
  )

# Summarize global production trends over time
global_production <- prod_data_filtered %>%
  group_by(Year, Item) %>%
  summarize(Global_Production = sum(Production, na.rm = TRUE), .groups = "drop")

# Create the animated line plot
p <- ggplot(global_production, aes(x = Year, y = Global_Production, color = Item)) +
  geom_line(linewidth = 1.2) +  # Line plot with thicker lines
  theme_classic() +  # Use a white background theme
  labs(
    x = "Year", 
    y = "Global Production (Metric Tons)",  
    color = "Crop",
    title = "Global Production Trends of Top 10 Staple Crops (1961 - 2022)",
    caption = "Source: FAO"
  ) +
  scale_color_manual(
    values = c("Wheat" = "#FF5733", "Rice" = "#33C4FF", "Maize (corn)" = "#FFB533", 
               "Potatoes" = "#33FF57", "Barley" = "#5A33FF", "Cassava" = "#FF33A1", 
               "Sweet potatoes" = "#FF8533", "Sorghum" = "#33FFAA", "Oats" = "#FF33CC", 
               "Beans" = "#7A33FF")
  ) +
  theme(
    legend.position = "right",  # Move legend to the side
    legend.direction = "vertical",  # Stack legend vertically
    legend.title = element_text(size = 12, face = "bold"),  # Adjust legend title size
    legend.text = element_text(size = 10),  # Adjust legend text size
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),  # Adjust title size
    axis.title.x = element_text(size = 12, face = "bold"),  # Adjust X axis title size
    axis.title.y = element_text(size = 12, face = "bold"),  # Adjust Y axis title size
    axis.text.x = element_text(size = 10),  # Adjust X axis tick labels size
    axis.text.y = element_text(size = 10),  # Adjust Y axis tick labels size
    panel.grid.major = element_line(color = "grey90"),  # Subtle major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    plot.background = element_rect(fill = "white", color = NA)  # Explicitly set white background
  ) +
  scale_y_continuous(
    labels = scales::comma_format(scale = 1e-6, prefix = "", suffix = "M"),  # Format y-axis in millions
    breaks = scales::pretty_breaks(n = 6)  # Automatically determine well-spaced breaks
  ) +
  scale_x_continuous(
    breaks = seq(min(global_production$Year, na.rm = TRUE), max(global_production$Year, na.rm = TRUE), by = 5)  # Adjust x-axis ticks
  ) +
  transition_reveal(Year)  # Add animation
# Render the animation
animate(
  animated_plot,
  nframes = 150,        # Number of frames in the animation
  fps = 10,             # Frames per second
  width = 900,          # Width of the output
  height = 600,         # Height of the output
  renderer = gifski_renderer("animated_line_plot.gif")  # Save as GIF
)

```


```{r, fig.height=9,fig.width=12}
# Load required libraries
library(dplyr)
library(ggplot2)
library(sf)
library(rnaturalearth)
library(viridis)

# Load world map data
world <- ne_countries(scale = "medium", returnclass = "sf")

# Aggregate total production of top 10 crops by country
top_crops <- c("Wheat", "Rice", "Maize (corn)", "Potatoes", "Barley", 
               "Cassava", "Sweet potatoes", "Sorghum", "Oats", "Beans")

agg_prod_data <- prod_data_long %>%
  filter(Item %in% top_crops) %>%
  group_by(Area) %>%
  summarize(Total_Production = sum(Production, na.rm = TRUE), .groups = "drop")

# Join aggregated data with world map
regional_map_data <- world %>%
  left_join(agg_prod_data, by = c("name" = "Area"))

# Create the choropleth map
ggplot(data = regional_map_data) +
  geom_sf(aes(fill = Total_Production), color = "black", size = 0.1) +
  scale_fill_gradient(
    low = "#3182bd", 
    high = "#225577", 
    name = "Total Production\n(Metric Tons)",
    labels = scales::comma_format(scale = 1e-6, suffix = "M"), 
    na.value = "#e0efff", 
    guide = guide_colorbar(barwidth = 15, barheight = 1)
  ) +
  labs(
    title = "Production of Top 10 Staple Crops",
    caption = "Source: FAO"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
    plot.caption = element_text(size = 14, hjust = 1, color = "#e0efff"),
    legend.position = "bottom",
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 14),
    axis.text = element_blank(),
    axis.title = element_blank()
  )


```

```{r, fig.height=9,fig.width=14}
# Ensure no missing years or categories
# Ensure no missing years or categories
library(tidyr)

agg_trends <- agg_trends %>%
  complete(Year = full_seq(Year, 1), Country_Category, fill = list(Total_Production = 0))

# Check for visible scale
agg_trends <- agg_trends %>%
  mutate(Total_Production = Total_Production / 1e6)  # Convert to millions if necessary

# Create the animated line plot
animated_plot <- ggplot(agg_trends, aes(x = Year, y = Total_Production, color = Country_Category, group = Country_Category)) +
  geom_line(linewidth = 1.2) +
  theme_minimal() +
  labs(
    title = "Production Trends of Staple Crops in Developed vs. Developing Countries",
    subtitle = "Year: {frame_time}",
    x = "Year",
    y = "Total Production (Millions of Metric Tons)",
    color = "Country Category",
    caption = "Source: FAO"
  ) +
  scale_y_continuous(
    labels = scales::comma_format(scale = 1, suffix = "M"),  # Adjust labels for millions
    breaks = scales::pretty_breaks(n = 10)
  ) +
  scale_x_continuous(
    breaks = seq(min(agg_trends$Year, na.rm = TRUE), max(agg_trends$Year, na.rm = TRUE), by = 5)
  ) +
  scale_color_manual(
    values = c("Developed" = "blue", "Developing" = "orange")
  ) +
  theme(
    plot.title = element_text(size = 22, face = "bold", hjust = 0.5),
    axis.title.x = element_text(size = 19),
    axis.title.y = element_text(size = 19),
    axis.text = element_text(size = 12),
    plot.caption = element_text(size = 14, hjust = 1, color = "grey30"),
    legend.position = "right",  # Legend on the right
    legend.direction = "vertical",  # Stack legend vertically
    legend.title = element_text(size = 19),
    legend.text = element_text(size = 18),
    panel.background = element_rect(fill = "white", color = NA),  # Set white background
    plot.background = element_rect(fill = "white", color = NA),  # Ensure white plot background
    panel.grid.major = element_line(color = "grey90"),  # Subtle grid lines
    panel.grid.minor = element_blank()  # Remove minor grid lines
  ) +
  transition_reveal(Year) +
  ease_aes('linear')
# Render the animation
animate(
  animated_plot,
  nframes = 150,        # Number of frames in the animation
  fps = 10,             # Frames per second
  width = 900,          # Width of the output
  height = 600,         # Height of the output
  renderer = gifski_renderer("developed_vs_developing.gif")  # Save as GIF
)

```
